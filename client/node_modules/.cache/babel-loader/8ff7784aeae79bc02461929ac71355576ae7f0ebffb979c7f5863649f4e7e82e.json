{"ast":null,"code":"import axios from 'axios';\n\n// 创建 axios 实例\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 可以在这里添加认证令牌等\napi.interceptors.request.use(config => {\n  // 从本地存储获取令牌（如果有的话）\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理常见错误\napi.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  // 处理错误响应\n  if (error.response) {\n    // 服务器返回了错误状态码\n    console.error('API Error:', error.response.data);\n\n    // 如果是认证错误，可以在这里处理登出逻辑\n    if (error.response.status === 401) {\n      localStorage.removeItem('token');\n      // 可以在这里添加重定向到登录页面的逻辑\n    }\n    return Promise.reject(error.response.data);\n  } else if (error.request) {\n    // 请求已发出，但没有收到响应\n    console.error('No response received:', error.request);\n    return Promise.reject({\n      message: '服务器无响应，请稍后再试'\n    });\n  } else {\n    // 请求设置时发生错误\n    console.error('Request error:', error.message);\n    return Promise.reject({\n      message: '请求错误，请稍后再试'\n    });\n  }\n});\n\n// 胶囊相关 API 服务\nexport const capsuleService = {\n  // 创建新的时间胶囊\n  createCapsule: async capsuleData => {\n    // 转换字段名以匹配后端API\n    const transformedData = {\n      title: capsuleData.subject,\n      content: capsuleData.message,\n      openDate: capsuleData.deliveryDate,\n      senderName: capsuleData.senderName,\n      senderEmail: capsuleData.senderEmail,\n      recipientName: capsuleData.recipientName,\n      recipientEmail: capsuleData.recipientEmail\n    };\n    return await api.post('/capsules', transformedData);\n  },\n  // 根据 ID 获取胶囊详情\n  getCapsuleById: async id => {\n    return await api.get(`/capsules/${id}`);\n  },\n  // 验证胶囊访问码\n  verifyCapsuleAccess: async (id, accessCode) => {\n    return await api.post(`/capsules/${id}/verify`, {\n      accessCode\n    });\n  },\n  // 获取用户创建的所有胶囊（需要认证）\n  getUserCapsules: async () => {\n    return await api.get('/capsules/user');\n  },\n  // 更新胶囊信息（需要认证）\n  updateCapsule: async (id, updateData) => {\n    return await api.put(`/capsules/${id}`, updateData);\n  },\n  // 删除胶囊（需要认证）\n  deleteCapsule: async id => {\n    return await api.delete(`/capsules/${id}`);\n  }\n};\n\n// 用户认证相关 API 服务\nexport const authService = {\n  // 用户注册\n  register: async userData => {\n    return await api.post('/auth/register', userData);\n  },\n  // 用户登录\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.token) {\n      localStorage.setItem('token', response.token);\n    }\n    return response;\n  },\n  // 用户登出\n  logout: () => {\n    localStorage.removeItem('token');\n  },\n  // 获取当前用户信息\n  getCurrentUser: async () => {\n    return await api.get('/auth/me');\n  },\n  // 检查用户是否已登录\n  isLoggedIn: () => {\n    return !!localStorage.getItem('token');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","data","console","status","removeItem","message","capsuleService","createCapsule","capsuleData","transformedData","title","subject","content","openDate","deliveryDate","senderName","senderEmail","recipientName","recipientEmail","post","getCapsuleById","id","get","verifyCapsuleAccess","accessCode","getUserCapsules","updateCapsule","updateData","put","deleteCapsule","delete","authService","register","userData","login","credentials","setItem","logout","getCurrentUser","isLoggedIn"],"sources":["D:/AppDevelopments/Remnant/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// 创建 axios 实例\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 可以在这里添加认证令牌等\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // 从本地存储获取令牌（如果有的话）\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器 - 处理常见错误\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response.data;\r\n  },\r\n  (error) => {\r\n    // 处理错误响应\r\n    if (error.response) {\r\n      // 服务器返回了错误状态码\r\n      console.error('API Error:', error.response.data);\r\n      \r\n      // 如果是认证错误，可以在这里处理登出逻辑\r\n      if (error.response.status === 401) {\r\n        localStorage.removeItem('token');\r\n        // 可以在这里添加重定向到登录页面的逻辑\r\n      }\r\n      \r\n      return Promise.reject(error.response.data);\r\n    } else if (error.request) {\r\n      // 请求已发出，但没有收到响应\r\n      console.error('No response received:', error.request);\r\n      return Promise.reject({ message: '服务器无响应，请稍后再试' });\r\n    } else {\r\n      // 请求设置时发生错误\r\n      console.error('Request error:', error.message);\r\n      return Promise.reject({ message: '请求错误，请稍后再试' });\r\n    }\r\n  }\r\n);\r\n\r\n// 胶囊相关 API 服务\r\nexport const capsuleService = {\r\n  // 创建新的时间胶囊\r\n  createCapsule: async (capsuleData) => {\r\n    // 转换字段名以匹配后端API\r\n    const transformedData = {\r\n      title: capsuleData.subject,\r\n      content: capsuleData.message,\r\n      openDate: capsuleData.deliveryDate,\r\n      senderName: capsuleData.senderName,\r\n      senderEmail: capsuleData.senderEmail,\r\n      recipientName: capsuleData.recipientName,\r\n      recipientEmail: capsuleData.recipientEmail\r\n    };\r\n    \r\n    return await api.post('/capsules', transformedData);\r\n  },\r\n  \r\n  // 根据 ID 获取胶囊详情\r\n  getCapsuleById: async (id) => {\r\n    return await api.get(`/capsules/${id}`);\r\n  },\r\n  \r\n  // 验证胶囊访问码\r\n  verifyCapsuleAccess: async (id, accessCode) => {\r\n    return await api.post(`/capsules/${id}/verify`, { accessCode });\r\n  },\r\n  \r\n  // 获取用户创建的所有胶囊（需要认证）\r\n  getUserCapsules: async () => {\r\n    return await api.get('/capsules/user');\r\n  },\r\n  \r\n  // 更新胶囊信息（需要认证）\r\n  updateCapsule: async (id, updateData) => {\r\n    return await api.put(`/capsules/${id}`, updateData);\r\n  },\r\n  \r\n  // 删除胶囊（需要认证）\r\n  deleteCapsule: async (id) => {\r\n    return await api.delete(`/capsules/${id}`);\r\n  }\r\n};\r\n\r\n// 用户认证相关 API 服务\r\nexport const authService = {\r\n  // 用户注册\r\n  register: async (userData) => {\r\n    return await api.post('/auth/register', userData);\r\n  },\r\n  \r\n  // 用户登录\r\n  login: async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    if (response.token) {\r\n      localStorage.setItem('token', response.token);\r\n    }\r\n    return response;\r\n  },\r\n  \r\n  // 用户登出\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n  },\r\n  \r\n  // 获取当前用户信息\r\n  getCurrentUser: async () => {\r\n    return await api.get('/auth/me');\r\n  },\r\n  \r\n  // 检查用户是否已登录\r\n  isLoggedIn: () => {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
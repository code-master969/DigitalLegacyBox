{"ast":null,"code":"var _jsxFileName = \"E:\\\\Tencent Hackathon\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 从本地存储加载用户信息\n  useEffect(() => {\n    const loadUser = async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      try {\n        // 设置默认请求头\n        axios.defaults.headers.common['x-auth-token'] = token;\n\n        // 获取用户信息\n        const res = await axios.get('/api/auth/me');\n        setCurrentUser(res.data);\n      } catch (error) {\n        console.error('加载用户信息失败:', error);\n        localStorage.removeItem('token');\n        delete axios.defaults.headers.common['x-auth-token'];\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  // 发送验证码\n  const sendVerificationCode = async email => {\n    setError(null);\n    try {\n      const res = await axios.post('/api/auth/send-code', {\n        email\n      });\n      return res.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '发送验证码失败');\n      throw error;\n    }\n  };\n\n  // 验证码登录\n  const verifyCodeAndLogin = async (email, code) => {\n    setError(null);\n    try {\n      const res = await axios.post('/api/auth/verify-code', {\n        email,\n        code\n      });\n\n      // 保存令牌到本地存储\n      localStorage.setItem('token', res.data.token);\n\n      // 设置默认请求头\n      axios.defaults.headers.common['x-auth-token'] = res.data.token;\n\n      // 更新用户状态\n      setCurrentUser(res.data.user);\n      return res.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || '验证失败');\n      throw error;\n    }\n  };\n\n  // 更新用户资料\n  const updateProfile = async userData => {\n    setError(null);\n    try {\n      const res = await axios.put('/api/auth/update-profile', userData);\n      setCurrentUser(res.data.user);\n      return res.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || '更新资料失败');\n      throw error;\n    }\n  };\n\n  // 注销\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['x-auth-token'];\n    setCurrentUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      error,\n      sendVerificationCode,\n      verifyCodeAndLogin,\n      updateProfile,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","loadUser","token","localStorage","getItem","defaults","headers","common","res","get","data","console","removeItem","sendVerificationCode","email","post","_error$response","_error$response$data","response","message","verifyCodeAndLogin","code","setItem","user","_error$response2","_error$response2$data","updateProfile","userData","put","_error$response3","_error$response3$data","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Tencent Hackathon/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 从本地存储加载用户信息\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (!token) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        // 设置默认请求头\r\n        axios.defaults.headers.common['x-auth-token'] = token;\r\n        \r\n        // 获取用户信息\r\n        const res = await axios.get('/api/auth/me');\r\n        setCurrentUser(res.data);\r\n      } catch (error) {\r\n        console.error('加载用户信息失败:', error);\r\n        localStorage.removeItem('token');\r\n        delete axios.defaults.headers.common['x-auth-token'];\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadUser();\r\n  }, []);\r\n\r\n  // 发送验证码\r\n  const sendVerificationCode = async (email) => {\r\n    setError(null);\r\n    try {\r\n      const res = await axios.post('/api/auth/send-code', { email });\r\n      return res.data;\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || '发送验证码失败');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 验证码登录\r\n  const verifyCodeAndLogin = async (email, code) => {\r\n    setError(null);\r\n    try {\r\n      const res = await axios.post('/api/auth/verify-code', { email, code });\r\n      \r\n      // 保存令牌到本地存储\r\n      localStorage.setItem('token', res.data.token);\r\n      \r\n      // 设置默认请求头\r\n      axios.defaults.headers.common['x-auth-token'] = res.data.token;\r\n      \r\n      // 更新用户状态\r\n      setCurrentUser(res.data.user);\r\n      \r\n      return res.data;\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || '验证失败');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 更新用户资料\r\n  const updateProfile = async (userData) => {\r\n    setError(null);\r\n    try {\r\n      const res = await axios.put('/api/auth/update-profile', userData);\r\n      setCurrentUser(res.data.user);\r\n      return res.data;\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || '更新资料失败');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 注销\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['x-auth-token'];\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n        loading,\r\n        error,\r\n        sendVerificationCode,\r\n        verifyCodeAndLogin,\r\n        updateProfile,\r\n        logout\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
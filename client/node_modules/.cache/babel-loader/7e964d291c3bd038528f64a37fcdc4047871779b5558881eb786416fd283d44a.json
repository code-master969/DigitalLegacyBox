{"ast":null,"code":"var _jsxFileName = \"D:\\\\AppDevelopments\\\\Remnant\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 检查用户是否已登录\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        // 从localStorage获取token\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          // 设置axios默认headers\n          axios.defaults.headers.common['x-auth-token'] = token;\n\n          // 跳过验证，直接信任本地token\n          // 实际用户数据应从登录响应中获取\n          const res = {\n            data: {\n              user: null\n            }\n          };\n          setCurrentUser(res.data);\n        }\n      } catch (err) {\n        // 如果token无效，清除localStorage\n        localStorage.removeItem('authToken');\n        delete axios.defaults.headers.common['Authorization'];\n        console.error('验证token失败:', err);\n      }\n      setLoading(false);\n    };\n    checkLoggedIn();\n  }, []);\n\n  // 登录函数\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      const res = await axios.post('/api/auth/login', {\n        email,\n        password\n      });\n\n      // 保存token到localStorage\n      localStorage.setItem('authToken', res.data.token);\n\n      // 设置axios默认headers\n      axios.defaults.headers.common['x-auth-token'] = res.data.token;\n\n      // 设置当前用户\n      setCurrentUser(res.data.user);\n      return res.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || '登录失败，请检查您的凭据');\n      throw err;\n    }\n  };\n\n  // 注册函数\n  const register = async (email, password, code) => {\n    try {\n      setError(null);\n      const res = await axios.post('/api/auth/register', {\n        email,\n        password,\n        code\n      });\n\n      // 保存token到localStorage\n      localStorage.setItem('authToken', res.data.token);\n\n      // 设置axios默认headers\n      axios.defaults.headers.common['x-auth-token'] = res.data.token;\n\n      // 设置当前用户\n      setCurrentUser(res.data.user);\n      return res.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || '注册失败，请稍后再试');\n      throw err;\n    }\n  };\n\n  // 登出函数\n  const logout = () => {\n    // 清除localStorage中的token\n    localStorage.removeItem('authToken');\n\n    // 清除axios默认headers\n    delete axios.defaults.headers.common['Authorization'];\n\n    // 清除当前用户\n    setCurrentUser(null);\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","checkLoggedIn","token","localStorage","getItem","defaults","headers","common","res","data","user","err","removeItem","console","login","email","password","post","setItem","_err$response","_err$response$data","response","message","register","code","_err$response2","_err$response2$data","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/AppDevelopments/Remnant/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 检查用户是否已登录\r\n  useEffect(() => {\r\n    const checkLoggedIn = async () => {\r\n      try {\r\n        // 从localStorage获取token\r\n        const token = localStorage.getItem('authToken');\r\n        \r\n        if (token) {\r\n          // 设置axios默认headers\r\n          axios.defaults.headers.common['x-auth-token'] = token;\r\n          \r\n          // 跳过验证，直接信任本地token\r\n          // 实际用户数据应从登录响应中获取\r\n          const res = { data: { user: null } };\r\n          setCurrentUser(res.data);\r\n        }\r\n      } catch (err) {\r\n        // 如果token无效，清除localStorage\r\n        localStorage.removeItem('authToken');\r\n        delete axios.defaults.headers.common['Authorization'];\r\n        console.error('验证token失败:', err);\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    checkLoggedIn();\r\n  }, []);\r\n\r\n  // 登录函数\r\n  const login = async (email, password) => {\r\n    try {\r\n      setError(null);\r\n      const res = await axios.post('/api/auth/login', { email, password });\r\n      \r\n      // 保存token到localStorage\r\n      localStorage.setItem('authToken', res.data.token);\r\n      \r\n                // 设置axios默认headers\r\n                axios.defaults.headers.common['x-auth-token'] = res.data.token;\r\n      \r\n      // 设置当前用户\r\n      setCurrentUser(res.data.user);\r\n      \r\n      return res.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || '登录失败，请检查您的凭据');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // 注册函数\r\n  const register = async (email, password, code) => {\r\n    try {\r\n      setError(null);\r\n      const res = await axios.post('/api/auth/register', { email, password, code });\r\n      \r\n      // 保存token到localStorage\r\n      localStorage.setItem('authToken', res.data.token);\r\n      \r\n      // 设置axios默认headers\r\n      axios.defaults.headers.common['x-auth-token'] = res.data.token;\r\n      \r\n      // 设置当前用户\r\n      setCurrentUser(res.data.user);\r\n      \r\n      return res.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || '注册失败，请稍后再试');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // 登出函数\r\n  const logout = () => {\r\n    // 清除localStorage中的token\r\n    localStorage.removeItem('authToken');\r\n    \r\n    // 清除axios默认headers\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    \r\n    // 清除当前用户\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}